#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "imagelistitem.h"
#include "taskmanager.h"

#include <QDialog>
#include <QString>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QCheckBox>
#include <QLabel>
#include <QProgressBar>
#include <QTimer>
#include <QNetworkAccessManager>
#include <QMessageBox>
#include <QNetworkReply>
#include <QUrlQuery>
#include <QNetworkRequest>
#include <QMenu>


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow),netman(new QNetworkAccessManager(this))
{
    ui->setupUi(this);
    ui->imagelist->setStyleSheet("#imagelist::Item:hover{background-color:rgb(41, 189, 139);}\n"
                                 "#imagelist::Item:selected{background-color:rgb(0, 148, 98);}");
    ui->imagelist->setSelectionMode(QAbstractItemView::ExtendedSelection);
    taskManager=new TaskManager();
    Task::setNetworkManager(netman);
    creatActions();
}
void MainWindow::creatActions(){
    QToolBar *tb=ui->mainToolBar;
    rightMenu=new QMenu();

    QAction *action_add_folder=creatAction("add_New_Folder","新建",":/images/新建.png",":/images/新建-hover.png");
    actions.append(action_add_folder);
    connect(action_add_folder,SIGNAL(triggered()),this,SLOT(addFolderDialog()));

    QAction *action_runAllinOrder=creatAction("run_inOrder","按顺序处理",":/images/顺序.png",":/images/顺序-hover.png");
    actions.append(action_runAllinOrder);

    QAction *action_pause_item=creatAction("action_pause_task","暂停",":/images/暂停.png",":/images/暂停-hover.png");
    actions.append(action_pause_item);
    rightMenu->addAction(action_pause_item);

    QAction *action_start_item=creatAction("action_restart_task","开始",":/images/开始.png",":/images/开始-hover.png");
    actions.append(action_start_item);
    rightMenu->addAction(action_start_item);

    QAction *action_delete_item=creatAction("action_delete_task","删除任务",":/images/删除.png",":/images/删除-hover.png");
    actions.append(action_delete_item);
    rightMenu->addAction(action_delete_item);

    tb->addActions(actions);
    tb->widgetForAction(action_add_folder)->setObjectName(action_add_folder->objectName());
    tb->widgetForAction(action_runAllinOrder)->setObjectName(action_runAllinOrder->objectName());
    tb->widgetForAction(action_delete_item)->setObjectName(action_delete_item->objectName());
    tb->widgetForAction(action_pause_item)->setObjectName(action_pause_item->objectName());
    tb->widgetForAction(action_start_item)->setObjectName(action_start_item->objectName());
    tb->setToolButtonStyle(Qt::ToolButtonIconOnly);

    tb->setStyleSheet("#add_New_Folder:hover{"
                      "border: 1px solid transparent;"
                      "}"
                      "#action_delete_task:hover{"
                      "border: 1px solid transparent;"
                      "}"
                      "#action_pause_task:hover{"
                      "border: 1px solid transparent;"
                      "}"
                      "#run_inOrder:hover{"
                      "border: 1px solid transparent;"
                      "}"
                      "#action_restart_task:hover{"
                      "border: 1px solid transparent;"
                      "}"
                      );

    setDeleteActionStatus(action_delete_item);
    setStartActionStatus(action_start_item);
    setPauseActionStatus(action_pause_item);

    connect(action_pause_item,&QAction::triggered,this,[=](){
        action_pause_item->setEnabled(false);
        action_start_item->setEnabled(true);
    });
    connect(ui->imagelist, SIGNAL(customContextMenuRequested(QPoint)),this, SLOT(slotLocalTestViewContextMenu(QPoint)));
}
QAction* MainWindow::creatAction(QString objectName,QString text,QString pixmap_fileName,QString pixmap_hover_fileName){
    QAction *action=new QAction(this);
    action->setObjectName(objectName);
    action->setText(text);
    QPixmap* pixmap_normal=new QPixmap(pixmap_fileName);
    QPixmap* pixmap_active=new QPixmap(pixmap_hover_fileName);
    QIcon* icon=new QIcon();
    icon->addPixmap(*pixmap_normal,QIcon::Normal);
    icon->addPixmap(*pixmap_active,QIcon::Active);
    action->setIcon(*icon);
    return action;
}
void MainWindow::setStartActionStatus(QAction* startAction){
    startAction->setEnabled(false);
    connect(ui->imagelist,&QListWidget::itemSelectionChanged,[=](){
        QList<QListWidgetItem *> selected=ui->imagelist->selectedItems();
        if(selected.size()>0){
            int count=0;
            for(int i=0;i<imageList.size();i++){
                if(taskManager->getDockerStatus(i)){
                   count++;
                }
            }
            if(count==imageList.size()){
                startAction->setEnabled(false);
            }else{
                startAction->setEnabled(true);
            }
        }else{
             startAction->setEnabled(false);
        }
    });

}
void MainWindow::setDeleteActionStatus(QAction* deleteAction){
    deleteAction->setEnabled(false);
    connect(ui->imagelist,&QListWidget::itemSelectionChanged,[=](){
        QList<QListWidgetItem *> selected=ui->imagelist->selectedItems();
        if(selected.size()>0){
            deleteAction->setEnabled(true);
        }else{
             deleteAction->setEnabled(false);
        }
    });


}
void MainWindow::setPauseActionStatus(QAction* pauseAction){
    pauseAction->setEnabled(false);
    connect(ui->imagelist,&QListWidget::itemSelectionChanged,[=](){
        QList<QListWidgetItem *> selected=ui->imagelist->selectedItems();
        if(selected.size()>0){
            int count=0;
            for(int i=0;i<imageList.size();i++){
                if(taskManager->getDockerStatus(i)){
                   count++;
                }
            }
            if(count>0){
                pauseAction->setEnabled(true);
            }else{
                pauseAction->setEnabled(false);
            }
        }else{
             pauseAction->setEnabled(false);
        }
    });
}

void MainWindow::slotLocalTestViewContextMenu(const QPoint &position)
{

    QModelIndex index=ui->imagelist->indexAt(position);
    if(!index.isValid())
    {
        qDebug()<<"slotLocalTestViewContextMenu: index is not valid";
        return;
    }

    QAction *result_action = rightMenu->exec(ui->imagelist->mapToGlobal(position));
    if(result_action == actions[0])
    {
        result_action->setText("新建");
        auto item=ui->imagelist->itemAt(position);
        imageList.removeAt(index.row());
        delete item;
    }
    if(result_action == actions[1])//action_pause_item
    {
        //auto item=ui->imagelist->itemAt(position);
        int i=index.row();
        taskManager->pauseSelected(i);

    }
    if(result_action==actions[2])//action_restart_item
    {
        //auto item=ui->imagelist->itemAt(position);
        int i=index.row();
        taskManager->restartSelected(i);

    }

    //foreach(QAction* action, actions)
   // {
    //    action->deleteLater();
   // }
    return;
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::addFolderDialog()
{
    dialog.setModal(true);
    int value=dialog.exec();

    if (value == QDialog::Accepted) {
        QString folder= dialog.folder;
        QString folderName=dialog.folderName;

        ui->imagelist->setResizeMode(QListView::Adjust);
        ui->imagelist->setAutoScroll(true);
        ImageListItem *itemView=new ImageListItem(folder,folderName,ui->imagelist);
        imageList.append(itemView);

        QListWidgetItem *imageItem = new QListWidgetItem(ui->imagelist);
        imageItem->setSizeHint(QSize(0,40));
        ui->imagelist->addItem(imageItem);

        ui->imagelist->setItemWidget(imageItem,itemView);
        QDateTime current_date_time =QDateTime::currentDateTime();
        QString current_date =current_date_time.toString("yyyy.MM.dd");
        QString fileName=dialog.folderName+"-"+current_date;
        Task *task=new Task(dialog.fileList,dialog.folder,fileName);
        qDebug()<<dialog.folder;
        taskManager->addTask(task);
    }
}

void MainWindow::on_cb_AllSelected_stateChanged()
{
    if(ui->cb_AllSelected->isChecked()==true){
        for(auto &item:imageList){

            item->cb->setCheckState(Qt::Checked);
        }
    }else{
        for(auto& item:imageList){
            item->cb->setCheckState(Qt::Unchecked);
        }
    }
}


void MainWindow::on_ok_button_clicked()
{
    httpConnectTest();
    QEventLoop loop;
    connect(this,&MainWindow::httpConnectSuccess,&loop,&QEventLoop::quit);
    loop.exec();
    for(int i=0;i<imageList.size();i++){
        auto &item=imageList[i];

        if(item->cb->checkState()==Qt::Checked){
            taskManager->select(i);
            item->pb->setValue(0);
        } else {
            taskManager->deselect(i);
        }
    }
    taskManager->setParalNum(2);//一次运行两个task
    connect(taskManager,SIGNAL(filesSended(int)),this,SLOT(reminder(int)));
    connect(taskManager,&TaskManager::getPorgress,[=](int iFile,int progress){
        auto &item=imageList[iFile];
        item->pb->setValue(progress);
    });
    connect(taskManager,&TaskManager::fileReturned,[=](int iFile){
        auto &item=imageList[iFile];
        item->label->setText("文件返回成功");

    });
    connect(taskManager,&TaskManager::littleImage,[=](int iFile){
        auto &item=imageList[iFile];
        item->label->setText("输入图片太少，请重新选择图片");

    });
    taskManager->runSelected();
}

void MainWindow::reminder(int i){
    auto &item=imageList[i];
    item->label->setText("图片上传到服务器，开始拼接正射影像");
}


void MainWindow::httpConnectTest(){
    QUrl url("http://192.168.188.10:9000/httpTest");
    QNetworkRequest request(url);
    QNetworkReply *reply=netman->get(request);
    connect(reply,&QNetworkReply::finished,[=](){
        QNetworkReply::NetworkError code=reply->error();
        qDebug()<<reply->errorString();
        if(code==QNetworkReply::ConnectionRefusedError){

            QMessageBox::information(this,QString::fromUtf8("提示"),QString::fromUtf8("服务器链接不成功,请检查服务器状态"),QMessageBox::Ok);
            reply->abort();
            emit this->httpConnectFailed();
        }
        else{
            emit this->httpConnectSuccess();
        }
    });
}

void MainWindow::on_pushButton_3_clicked()
{
    taskManager->stopSelected();
    for(int i=0;i<imageList.size();i++){
        auto &item=imageList[i];
        if(item->cb->checkState()==Qt::Checked){
            item->label->setText("已取消");
            item->pb->setValue(0);
        }
    }

}
void MainWindow::closeEvent(QCloseEvent *event)
{
    //TODO: 在退出窗口之前，实现希望做的操作
    taskManager->stopSelected();
}


